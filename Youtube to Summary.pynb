{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "# Youtube url -> Transcription -> Summary\n",
        "- using whisper-small, and \"knkarthick/MEETING-SUMMARY-BART-LARGE-XSUM-SAMSUM-DIALOGSUM\""
      ],
      "metadata": {
        "id": "B0iIijfxWtrv"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Setting up whisper and BART:"
      ],
      "metadata": {
        "id": "vYUDT7YiYNd_"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "riFZAW4IWZtI"
      },
      "outputs": [],
      "source": [
        "import torch\n",
        "from transformers import pipeline\n",
        "\n",
        "device = \"cuda:0\" if torch.cuda.is_available() else \"cpu\"\n",
        "\n",
        "#--- whisper\n",
        "model_transcriber = pipeline(\n",
        "  \"automatic-speech-recognition\",\n",
        "  model=\"openai/whisper-small\",\n",
        "  chunk_length_s=30,\n",
        "  device=device,\n",
        ")\n",
        "\n",
        "def transcribe(file, model=model_transcriber, language=\"english\"):\n",
        "    return model(file, generate_kwargs={\"language\": language})[\"text\"]\n",
        "\n",
        "\n",
        "#--- BART:\n",
        "model_summarizer = pipeline(\"summarization\", model=\"knkarthick/MEETING-SUMMARY-BART-LARGE-XSUM-SAMSUM-DIALOGSUM\", device=device)\n",
        "def summarize(txt,model=model_summarizer):\n",
        "  return model(txt)[0]['summary_text']"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Youtube -> Mp4 -> Mp3 -> Flac pipeline:"
      ],
      "metadata": {
        "id": "YeYePOz6Zo7_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install yt-dlp -U"
      ],
      "metadata": {
        "id": "PESKNGfbZvhV"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from yt_dlp import YoutubeDL, DownloadError\n",
        "import os\n",
        "\n",
        "def dl_flac(url, output_path): #function to download .flac from youtube\n",
        "    if not os.path.exists(output_path):\n",
        "      os.makedirs(output_path)\n",
        "    ydl_opts = {\n",
        "        'format': 'bestaudio/best', #change params as needed\n",
        "        \"max_filesize\": 20 * 1024 * 1024,\n",
        "         \"outtmpl\": f\"{output_path}/%(id)s.%(ext)s\",\n",
        "        \"noplaylist\": True,\n",
        "        \"verbose\": False,\n",
        "        \"quiet\": True,\n",
        "        \"no_warnings\": True,\n",
        "        'postprocessors': [{\n",
        "            'key': 'FFmpegExtractAudio',\n",
        "            'preferredcodec': 'flac',\n",
        "            'preferredquality': '192',\n",
        "        }],\n",
        "    }\n",
        "    ydl = YoutubeDL(ydl_opts)\n",
        "    try:\n",
        "        meta = ydl.extract_info(\n",
        "            url,\n",
        "            download=True,\n",
        "        )\n",
        "    except DownloadError as e:\n",
        "        raise e\n",
        "    else:\n",
        "        video_id = meta[\"id\"]\n",
        "        return { #we return a dict\n",
        "            \"title\": meta[\"title\"],\n",
        "            \"file_path\": f\"{output_path}/{video_id}.flac\"\n",
        "        }"
      ],
      "metadata": {
        "id": "46N1mMGyZt3A"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Running inference:"
      ],
      "metadata": {
        "id": "QTJw0lPudZ3C"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def inference(URL,verbose=False,prnt=False): #in prod, use default settings\n",
        "  if verbose: print('Downloading from Youtube...')\n",
        "  flac_path = dl_flac(URL,'/downloaded_flac')['file_path']\n",
        "\n",
        "  if verbose: print('Transcribing audio...')\n",
        "  transcript = transcribe(flac_path)\n",
        "  if verbose: print('Summarizing transcript...')\n",
        "  summary = summarize(transcript)\n",
        "  if prnt: print(f'\\nSummary: \\n{summary}')\n",
        "  else: return(summary)"
      ],
      "metadata": {
        "id": "HNZsMe1-ajvE"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "inference('https://www.youtube.com/watch?v=EaQgzQDQeHQ', verbose=True, prnt=True)"
      ],
      "metadata": {
        "id": "cT2cc6nqawAm"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
